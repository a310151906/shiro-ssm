<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx.xsd
       http://www.springframework.org/schema/mvc
       http://www.springframework.org/schema/mvc/spring-mvc.xsd">

    <!--1.配置SecurityManager-->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <property name="cacheManager" ref="cacheManager"/>
        <property name="authenticator" ref="authenticator"/>
        <!--配置多realm-->
        <property name="realms">
            <list>
                <ref bean="jdbcRealm"/>
                <ref bean="secondRealm"/>
            </list>
        </property>
        <!--设置rememberMe失效时间-->
        <property name="rememberMeManager" ref="rememberMeManager"/>
    </bean>
    <!--设置rememberMe接口的实现类CookieRememberMeManager中的cookie属性的maxAge属性-->
    <bean class="org.apache.shiro.web.mgt.CookieRememberMeManager" id="rememberMeManager">
        <property name="cookie.maxAge" value="10"/>
    </bean>

    <!--2.配置CacheManager-->
    <!--2.1需要加入ehcache的jar包及配置文件-->
    <bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
        <property name="cacheManagerConfigFile" value="classpath:ehcache.xml"/>
    </bean>

    <!--配置认证策略-->
    <bean id="authenticator" class="org.apache.shiro.authc.pam.ModularRealmAuthenticator">
        <property name="authenticationStrategy">
            <bean class="org.apache.shiro.authc.pam.AtLeastOneSuccessfulStrategy"/>
        </property>
    </bean>

    <!--3.配置Realm-->
    <!--3.1直接配置实现了org.apache.shiro.realm.Realm接口的bean-->
    <bean id="jdbcRealm" class="cn.kgc.shiro.realms.ShiroRealm">
        <!--将前台传来的密码进行加密-->
        <property name="credentialsMatcher">
            <bean class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
                <!--public SimpleHash(String algorithmName, Object source, Object salt, int hashIterations)-->
                <!--指定加密的算法-->
                <property name="hashAlgorithmName" value="MD5"/>
                <!--指定加密的次数-->
                <property name="hashIterations" value="1024"/>
             </bean>
        </property>
    </bean>
    <!--第二个Realm-->
    <bean id="secondRealm" class="cn.kgc.shiro.realms.SecondRealm">
        <!--将前台传来的密码进行加密-->
        <property name="credentialsMatcher">
            <bean class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
                <!--public SimpleHash(String algorithmName, Object source, Object salt, int hashIterations)-->
                <!--指定加密的算法-->
                <property name="hashAlgorithmName" value="SHA1"/>
                <!--指定加密的次数-->
                <property name="hashIterations" value="1024"/>
            </bean>
        </property>
    </bean>

    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager"/>
    </bean>
    <!--6.配置ShiroFilter-->
    <!--6.1 id必须和web.xml文件中的配置的DelegatingFilterProxy的<filter-name>一致-->

    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <property name="securityManager" ref="securityManager"/>
        <property name="loginUrl" value="/login.jsp"/>
        <property name="successUrl" value="/list.jsp"/>
        <property name="unauthorizedUrl" value="/unauthorized.jsp"/>
        <!--配置哪些页面需要受到保护-->
        <!--以及访问这些页面需要的权限-->
        <!--1）.anon可以被匿名访问-->
        <!--2）.authc必须认证（即登入）后才可能访问的页面-->
        <!--3）. logout 登出。-->
        <!--4）. roles 角色过滤器。-->

        <!--<property name="filterChainDefinitions">
            <value>
                &lt;!&ndash;配置有顺序，后面的会覆盖前面的&ndash;&gt;
                /login.jsp = anon
                /shiro/login.do = anon
                /shiro/logout.do = logout
                &lt;!&ndash;权限分配&ndash;&gt;
                /user.jsp = roles[user]
                /admin.jsp = roles[admin]

                # everything else requires authentication:
                /** = authc
            </value>
        </property>-->

        <!--从数据库中初始化资源和权限-->
        <property name="filterChainDefinitionMap" ref="filterChainDefinitionMap"/>

    </bean>

    <!--配置一个bean,该bean实际上是一个Map,通过实例工厂的方式-->
    <bean id="filterChainDefinitionMapBuilder" class="cn.kgc.shiro.factory.FilterChainDefinitionMapBuilder"/>

    <bean id="filterChainDefinitionMap"
          factory-bean="filterChainDefinitionMapBuilder" factory-method="buildFilterChainDefinitionMap"/>

</beans>
